/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef STATSVIEWBASE_HPP
#define STATSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/stats_screen/StatsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/Image.hpp>

class StatsViewBase : public touchgfx::View<StatsPresenter>
{
public:
    StatsViewBase();
    virtual ~StatsViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void changeToScreen1();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard curRpm;
    touchgfx::TextAreaWithOneWildcard maxRpm;
    touchgfx::TextAreaWithOneWildcard curSpeed;
    touchgfx::TextAreaWithOneWildcard maxSpeed;
    touchgfx::TextAreaWithOneWildcard maxCoolantTemp;
    touchgfx::TextAreaWithOneWildcard curCoolantTemp;
    touchgfx::TextAreaWithOneWildcard maxOilTemp;
    touchgfx::TextAreaWithOneWildcard maxFuelTemp;
    touchgfx::TextAreaWithOneWildcard curOilTemp;
    touchgfx::TextAreaWithOneWildcard curFuelTemp;
    touchgfx::TextAreaWithOneWildcard minOilPressure;
    touchgfx::TextAreaWithOneWildcard minFuelPressure;
    touchgfx::TextAreaWithOneWildcard curOilPressure;
    touchgfx::TextAreaWithOneWildcard curFuelPressure;
    touchgfx::TextAreaWithOneWildcard tps;
    touchgfx::TextAreaWithOneWildcard runTime;
    touchgfx::TextAreaWithOneWildcard baro;
    touchgfx::TextAreaWithOneWildcard minVoltage;
    touchgfx::TextAreaWithOneWildcard curVoltage;
    touchgfx::TextAreaWithOneWildcard fuelUsed;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextArea textArea1_1_2;
    touchgfx::TextArea textArea1_1_2_1;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::TextArea textArea1_1_1_1;
    touchgfx::TextArea textArea1_1_1_1_1;
    touchgfx::TextArea textArea1_1_1_1_1_3;
    touchgfx::TextAreaWithOneWildcard maxIat;
    touchgfx::TextAreaWithOneWildcard curIat;
    touchgfx::TextArea textArea1_1_1_1_1_3_1;
    touchgfx::TextArea textArea1_1_1_1_1_2;
    touchgfx::TextArea textArea1_1_1_1_1_2_1;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2_3;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2_1;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2_1_2;
    touchgfx::TextArea textArea1_1_1_1_1_1;
    touchgfx::TextArea textArea1_1_1_1_1_1_1;
    touchgfx::TextArea textArea1_1_1_1_1_1_1_1;
    touchgfx::TextArea textArea1_1_1_1_1_1_1_1_1;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::Line line1_1_1;
    touchgfx::PainterRGB565 line1_1_1Painter;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2_2;
    touchgfx::TextArea textArea1_1_1_1_1_2_1_2_1_1;
    touchgfx::Line line1_1_1_1;
    touchgfx::PainterRGB565 line1_1_1_1Painter;
    touchgfx::Image cel;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CURRPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curRpmBuffer[CURRPM_SIZE];
    static const uint16_t MAXRPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxRpmBuffer[MAXRPM_SIZE];
    static const uint16_t CURSPEED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curSpeedBuffer[CURSPEED_SIZE];
    static const uint16_t MAXSPEED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxSpeedBuffer[MAXSPEED_SIZE];
    static const uint16_t MAXCOOLANTTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxCoolantTempBuffer[MAXCOOLANTTEMP_SIZE];
    static const uint16_t CURCOOLANTTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curCoolantTempBuffer[CURCOOLANTTEMP_SIZE];
    static const uint16_t MAXOILTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxOilTempBuffer[MAXOILTEMP_SIZE];
    static const uint16_t MAXFUELTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxFuelTempBuffer[MAXFUELTEMP_SIZE];
    static const uint16_t CUROILTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curOilTempBuffer[CUROILTEMP_SIZE];
    static const uint16_t CURFUELTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curFuelTempBuffer[CURFUELTEMP_SIZE];
    static const uint16_t MINOILPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar minOilPressureBuffer[MINOILPRESSURE_SIZE];
    static const uint16_t MINFUELPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar minFuelPressureBuffer[MINFUELPRESSURE_SIZE];
    static const uint16_t CUROILPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curOilPressureBuffer[CUROILPRESSURE_SIZE];
    static const uint16_t CURFUELPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curFuelPressureBuffer[CURFUELPRESSURE_SIZE];
    static const uint16_t TPS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tpsBuffer[TPS_SIZE];
    static const uint16_t RUNTIME_SIZE = 10;
    touchgfx::Unicode::UnicodeChar runTimeBuffer[RUNTIME_SIZE];
    static const uint16_t BARO_SIZE = 10;
    touchgfx::Unicode::UnicodeChar baroBuffer[BARO_SIZE];
    static const uint16_t MINVOLTAGE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar minVoltageBuffer[MINVOLTAGE_SIZE];
    static const uint16_t CURVOLTAGE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curVoltageBuffer[CURVOLTAGE_SIZE];
    static const uint16_t FUELUSED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar fuelUsedBuffer[FUELUSED_SIZE];
    static const uint16_t MAXIAT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar maxIatBuffer[MAXIAT_SIZE];
    static const uint16_t CURIAT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar curIatBuffer[CURIAT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // STATSVIEWBASE_HPP
